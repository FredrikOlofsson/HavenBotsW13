// A butcher bot, made by Purus Cor to demonstrate the usage and capabilities of the Purus Pasta PBot Botting API
// For more information about the API, join Purus Pasta discord server!
// To suggest features into API, suggest them in discord

const PBotAPI = Java.type('haven.purus.pbot.PBotAPI');
const ui = PBotAPI.ui();
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const window = PBotUtils.PBotWindow(ui, "Butcher", 110, 110, ScriptID);

let skinBol = false;
let cleanBol = false;
let butcherBol = false;
let boneBol = false;

const skinCheck = window.addCheckbox("skin", "Skin", skinBol, 5, 5);
const cleanCheck = window.addCheckbox("clean", "Clean", cleanBol, 5, 25);
const butcherCheck = window.addCheckbox("butcher", "Butcher", butcherBol, 5, 45);
const boneCheck = window.addCheckbox("bone", "Collect bones", boneBol, 5, 65);
const start = window.addButton("btnClick", "Start", 100, 5, 85);
const infoLabel = window.addLabel("", 5, 90);
const stopB = window.addButton("btnStop", "X", 0, 90, 0);

const skin = () => {skinBol = !skinBol;};
const clean = () => {cleanBol = !cleanBol;};
const butcher = () => {butcherBol = !butcherBol;};
const bone = () => {boneBol = !boneBol;};

let stop = false;

function waitingMenu(menu) {
	PBotUtils.waitForFlowerMenu(ui, 3);
    if (!PBotUtils.petalExists(ui)) {
    	PBotUtils.sysMsg(ui, "Did't find petal!");
    	return false;
    } else {
    	if (!PBotUtils.choosePetal(ui, menu)) {
    		PBotUtils.closeFlowermenu(ui);
    		PBotUtils.sysMsg(ui, "Did't find " + menu);
    		return false;
    	} else {
    	    if (menu != "Collect bones") {
    		    PBotUtils.waitForHourglass(ui);
    		}
    		PBotUtils.waitFlowermenuClose(ui);
    		PBotUtils.sysMsg(ui, menu);
    		return true;
    	}
    }
};

function pfRightClick(gob) {
	PBotUtils.sysMsg("Butcher move1");
	while (!PBotUtils.petalExists(ui) && !shouldStop()) {
		PBotUtils.sysMsg(ui, "Butcher move2");
		PBotUtils.pfRightClick(ui, gob, 0);
		PBotUtils.sleep(1000);
	}
};

function getPlayer() {
	return PBotGobAPI.player(ui);
}

function shouldStop() {
	if (PBotCharacterAPI.getEnergy(ui) <= 22) PBotUtils.sysMsg(ui, "Not enough energy!");
	if (stop) PBotUtils.sysMsg(ui, "Stop!");
	if (window.closed()) PBotUtils.sysMsg(ui, "Windows closed!");
	return stop || window.closed() || PBotCharacterAPI.getEnergy(ui) <= 22;
};

const btnStop = () => {
	stop = true;
};

const btnClick = () => {
	start.hide();
	stop = false;
	
	PBotUtils.sysMsg(ui, "Select an area with animals to butcher by dragging.");
	PBotUtils.selectArea(ui);
	
	let gobs = PBotUtils.gobsInArea(ui, PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB());
	let butchered_animals = 0;
	
	if (shouldStop()) return false;
	
	for (let gob of gobs) {
		let ba = butchered_animals + 1;
		infoLabel.setText(ba + " animal");
		if(!gob.isKnocked()) {
		    PBotUtils.sysMsg(ui, gob.toString());
			continue; // Probably not a butcherable animal
		}
		
		PBotUtils.dropItemFromHand(ui, 0);
		
		if (shouldStop()) break;
		if (skinBol) {
			if (!gob.pfClick(3, 0)) {
			    PBotUtils.sysMsg(ui, "Didn't find path!");
			    continue;
			}

			if(waitingMenu("Skin")) {
				if (shouldStop()) break;
				infoLabel.setText("Skin " + ba + " animal");
			}
			if (!gob.pfClick(3, 0)) {
			    PBotUtils.sysMsg(ui, "Didn't find path!");
			    continue;
			}
			if(waitingMenu("Scale")) {
				if (shouldStop()) break;
				infoLabel.setText("Skin " + ba + " animal");
			}
			PBotUtils.dropItemFromHand(ui, 0);
		}
		
		if (shouldStop()) break;
		if (cleanBol) {
			if (!gob.pfClick(3, 0)) {
                PBotUtils.sysMsg(ui, "Didn't find path!");
                continue;
            }
			
			if(waitingMenu("Clean")) {
				if (shouldStop()) break;
				infoLabel.setText("Clean " + ba + " animal");
			}
			PBotUtils.dropItemFromHand(ui, 0);
		}
		
		if (shouldStop()) break;
		if (butcherBol) {
			if (!gob.pfClick(3, 0)) {
                PBotUtils.sysMsg(ui, "Didn't find path!");
                continue;
            }
			

			if (waitingMenu("Butcher")) {
				if (shouldStop()) break;
				infoLabel.setText("Butcher " + ba + " animal");
			}
			PBotUtils.dropItemFromHand(ui, 0);
		}
		
		if (shouldStop()) break;
		if (boneBol) {
			if (!gob.pfClick(3, 0)) {
                PBotUtils.sysMsg(ui, "Didn't find path!");
                continue;
            }
			
			if (waitingMenu("Collect bones")) {
				if (shouldStop()) break;
				infoLabel.setText("Collect bones " + ba + " animal");
				while (PBotGobAPI.findGobById(ui, gob.getGobId()) != null) {
					PBotUtils.sleep(5);
				}
			}
			PBotUtils.dropItemFromHand(ui, 0);
		}
		
		butchered_animals++;
	}
	
	PBotUtils.sysMsg(ui, "Butcher done! Butchered: " + butchered_animals + " animals.");
	infoLabel.setText("");
	start.show();
};



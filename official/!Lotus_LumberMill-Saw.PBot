//init
const ui = Java.type('haven.purus.pbot.PBotAPI').ui();
const hcConfig = Java.type('haven.Config');
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');

const VERSIONNAME = "0.1"
const WINDOWNAME = "LumberMill-saw";
const HOWTO = "HOWTO:\n  1. Press start\n  2. Select work zone \n";
const TICK = 100;
const PEDALOPTION = "Make boards";

const messageLevel = 3;
var stopmsg = [];
var start = Date.now();

////////////////
windowWidth = 120;
windowHeight = 150;
const window = PBotUtils.PBotWindow(ui, WINDOWNAME, windowWidth, windowHeight, ScriptID);
const btnStart = window.addButton("btnStartClick", "Start", 80, 24, 0);
const howtoBtn = window.addButton("howtoBtnClick", "?", 24, 104, 0);
const statusLbl = window.addLabel("Select area with logs ..", 10, 10);
const progressLbl = window.addLabel("", 10, 25);
const timeLbl = window.addLabel(" ", 10, 40);
const estLbl = window.addLabel(" ", 10, 60);
const devider = window.addLabel("_____________", 25, 65);
const activityLbl = window.addLabel(" ", 10, 85);
statusLbl.hide();
progressLbl.hide();
estLbl.hide();
timeLbl.hide();
devider.hide();
activityLbl.hide();
const btnStartClick = () => {
	btnStart.hide();
	howtoBtn.hide();
	start = Date.now();
	main()
	statusLbl.hide();
	progressLbl.hide();
	estLbl.hide();
	timeLbl.hide();
	devider.hide();
  activityLbl.hide();
	btnStart.show();
	howtoBtn.show();
	info("Done", 0);
}
const howtoBtnClick = () => {
	info(WINDOWNAME + " " + VERSIONNAME + " " + HOWTO, 0)
}
///////////////
const main = () => {
	//add kilns in area to workorder
	var aLogs = [];
	statusLbl.show();
	PBotUtils.selectArea(ui);
	progressLbl.show();
	estLbl.show();
	timeLbl.show();
	devider.show();
  activityLbl.show();
	let allGobs = PBotUtils.gobsInArea(ui, PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB());
	for (let g of allGobs) {
		if (isLog(g))
			aLogs.push(g);
	}
	let workorder = aLogs;
	statusLbl.setText("Added Workorders!");
  info("Added Workorders!", 1);
	//NOTE sort the workorders depending on distance from player
	statusLbl.setText("Sorting Workorders");
	info("Sorting Workorders", 1);
	workorder = workorder.sort(
		(a, b) =>
			PBotGobAPI.player(ui).getRcCoords().dist(a.getRcCoords()) - PBotGobAPI.player(ui).getRcCoords().dist(b.getRcCoords())
	);
	statusLbl.setText("Sorting Done!");
	info("Sorting Done!", 1);
	statusLbl.setText("Amount of Logs: " + workorder.length);
  info("Amount of Logs: " + workorder.length, 2);
	let processed = 0; 	//used to calculate time of completion based on workorder
	workorder.forEach((gob) => {
		if(!window.closed() && !irq()){
      activityLbl.setText("Working on new gob, Please wait...");
			info("Working on new gob, Please wait...  ", 1);
			progressLbl.setText("Progress: " + Math.round(processed/workorder.length*100) + "%");
      activityLbl.setText("Walking, Please wait...")
      info("Walking, Please wait...", 1);
			PBotUtils.pfRightClick(ui, gob, 0);
			saw(gob);
      activityLbl.setText("drop item from hand, Please wait...");
      info("drop item from hand, Please wait...", 1);
      PBotUtils.dropItemFromHand(ui, 100);
			PBotUtils.sleep(TICK);
			processed++;
			let seconds = ((Date.now()-start)/processed*(workorder.length-processed))/1000;
			let minutes = Math.floor((seconds)/60);
			seconds = Math.floor(seconds%60);
			estLbl.setText(minutes + " min " + seconds + " sec ");
		}
	});
}
///////////////////
function isLog(a) {
	let res = false;
	try {
		let gobName = a.getResname();
		res = gobName.endsWith("log");
	} catch(e) {info("isLog: " + e, 2)};
	return res;
}
function saw(gob) {
	let tries = 3;
  activityLbl.setText("Target: " + gob.getResname().toString());
  sinfo("Target: " + gob.getResname().toString(), 1);
	for (var i = 0; i < tries; i++) {
		if(!window.closed() && PBotGobAPI.findGobById(ui, gob.gob.id) != null){
      activityLbl.setText("processing log...  " + i + " out of " + tries + " tries");
			info("processing log...  " + i + " out of " + tries + " tries", 2);
			gob.doClick(3, 0);

      activityLbl.setText("Right click ..  " + gob.getResname());
      info("Right click ..  " + gob.getResname(), 2);
			PBotUtils.sleep(TICK);

      activityLbl.setText("choice ..  " + PEDALOPTION);
      info("choice petal ..  " + PEDALOPTION, 2);
			PBotUtils.choosePetal(ui, PEDALOPTION);
			waitForIdle();
		}
    PBotUtils.sleep(TICK);
	}
}
function updatetime(){

  info("updating time, please wait .. ");
	let seconds = (Date.now()-start)/1000;
	let minutes = Math.floor((seconds)/60);
	seconds = Math.floor(seconds%60);
	timeLbl.setText(minutes + " min " + seconds + " sec ");
}
function waitForIdle() {
  activityLbl.setText("Wait for idle ..");
  info("Wait for idle", 4);
	const tick = 100;
	const maxWaitTicks = 5;
	let idleCounter = maxWaitTicks;
  while (idleCounter >= 0 && !irq()) {
    if (
			(PBotUtils.getHourglass(ui) == -1)
			||
			(PBotUtils.getHourglass(ui) >= 0.8)
      &&
      (!PBotGobAPI.player(ui).isMoving())
		)
			idleCounter--;
		else idleCounter = maxWaitTicks;
		PBotUtils.sleep(tick);
    info("Idle", 4);
		updatetime();
	}
}
function info(s, l) {
	if (l <= messageLevel)
		PBotUtils.sysMsg(ui, s + "", 128, 192, 200);
}
function sinfo(s, l) {
	if (l <= messageLevel)
		PBotUtils.sysMsg(ui, s + "", 50, 200, 60);
}
function err(s) {
	stopmsg.push(s);
}
function irq() {
	if (PBotCharacterAPI.getStamina(ui) < 35) {
		err("Out of stamina");
	}
	if (PBotCharacterAPI.getEnergy(ui) < 35) {
		err("Out of energy");
	}
	if (PBotWindowAPI.getWindow(ui, WINDOWNAME) == null) {
		info("Stopped", 0);
		return true;
	}
	if (stopmsg.length == 0) {
		return false;
	} else {
		let errstr = "⚠ ";
		for (let r of stopmsg) {
			errstr += r + " ⚠ ";
		}
		PBotUtils.sysMsg(ui, errstr, 255, 128, 0);
		return true;
	}
}

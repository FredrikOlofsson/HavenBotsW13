//init
const ui = Java.type('haven.purus.pbot.PBotAPI').ui();
const hcConfig = Java.type('haven.Config');
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');

const VERSIONNAME = "0.24a"
const WINDOWNAME = "Plow snow";
const HOWTO = "HOWTO:\n  1. Equip shovel (optionally)\n  2. Prepare snow piles (optionally)\n  3. Click [Clean] and select area with snow tiles and piles";
const TICK = 150;
var stopmsg = [];
const messageLevel = 1;
const LS_SNOW = ["Snow"];
const LS_STOCKPILE = "Stockpile";

var g_aPiles = [];

//UI
const mWindow = PBotUtils.PBotWindow(ui, WINDOWNAME, 24, 140, ScriptID);
const f1Btn = mWindow.addButton("f1F", "Clean", 80, 24, 0);
const f2Btn = mWindow.addButton("f2F", "?", 24, 104, 0);
const lbl1 = mWindow.addLabel("", 32, 8);
lbl1.hide();
const f1F = () => {
	f1Btn.hide();
	f2Btn.hide();
	lbl1.show();
	stopmsg = [];
	let ADRINK = hcConfig.autodrink;
	autodrinkSwitch(false);
	try {
		if ( main() ) 
			info("Done", 0);
	} catch (e) {
		info("ERROR: " + e, 1);
		mWindow.closeWindow();
	} finally {
		autodrinkSwitch(ADRINK);
	}
	f1Btn.show();
	f2Btn.show();
	lbl1.hide();
}
const f2F = () => {
	info(WINDOWNAME + " " + VERSIONNAME + " " + HOWTO, 0);
}

function main() { 
	lbl1.setText("Select work zone");
	PBotUtils.selectArea(ui);
	let selectedZone = {
		"a" : PBotUtils.getSelectedAreaA(),
		"b" : PBotUtils.getSelectedAreaB()
	};
	let limits = {
		"min" : {
			"x" : Math.min(selectedZone.a.x, selectedZone.b.x),
			"y" : Math.min(selectedZone.a.y, selectedZone.b.y),
		},
		"max" : {
			"x" : Math.max(selectedZone.a.x, selectedZone.b.x),
			"y" : Math.max(selectedZone.a.y, selectedZone.b.y),
		},
	}
	
	let aTargetTiles = updateTileArray(limits);

	g_aPiles = [];
	let lAllGobs = PBotUtils.gobsInArea(ui, PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB());
	for (let g of lAllGobs) {
		if (isPile(g))
			g_aPiles.push(g);
	}

	info("Snowplow started. Please wait...", 1);
	lbl1.setText("Close to stop");
	let lastDigged = aTargetTiles.length;
	while (lastDigged != 0) {
		aTargetTiles = updateTileArray(limits);
		lastDigged = plowTileArray(aTargetTiles);
		if (irq()) return false;
		info(lastDigged + " tiles cleaned", 3);
		info("Looking for missed spots. Please wait...", 1);
		PBotUtils.sleep(1000); //wait to refresh map data before next re-check
	}
	return true;
}
function isPile(a) {
	let res = false;
	try {
		if (a == null)
			return false;
		if (a.getResname() != "gfx/terobjs/stockpile-snow")
			return false;
		res = (!a.stockpileIsFull());
	} catch(e) {info("isPile: " + e, 3)};
	return res;
}
function updateTileArray(a){
	let res = [];
	try {	
		for (let i = a.min.x; i < a.max.x; i += 11) {
			let rewind = ((i / 11) % 2 == 0);
			let row = [];
			for (let j = a.min.y; j < a.max.y; j += 11)
				if (PBotUtils.tileResnameAt(ui, i, j) == "gfx/tiles/snow")
					row.push({"x" : i, "y" : j});
			if (rewind) row.reverse();
			res = res.concat(row);
		}
	} catch (e) {err("updateTileArray() error:"  + e);}
	return res;
}
function waitForPlow() {
	info("Wait for idle", 4);
	const maxWaitTicks = 3;
	let idleCounter = maxWaitTicks;
	while (idleCounter >= 0 && !irq()) {
		if ( 
			(PBotUtils.getHourglass(ui) == -1)
			||
			(PBotUtils.getHourglass(ui) >= 0.8)
		)
			idleCounter--;
		else {
			idleCounter = maxWaitTicks;
			if (!isTileCentered()) {
				info("Digging soil again, aren't we?", 3);
				cancelDigging();
				return false;
			}
		}
		PBotUtils.sleep(120);
	}
	info("Idle", 4);
	return true;
}
function isTileCentered() {
	let r = false;
	const TDSTMARGIN = 2;
	try {
		let plrDstToTileCenter = PBotGobAPI.player(ui).gob.rc.mod(11, 11).sub(5.5, 5.5).abs();
		r = (plrDstToTileCenter < TDSTMARGIN);
	} catch (e) {info("isTileCentered() error: " + e, 3);}
	return r;
}
function plowTileArray(a) {
	let digged = 0;
	for (let i of a) {
		if (irq()) return -1;

		if (startDigging(i.x, i.y)) {
			digged++;
			if (PBotUtils.getItemAtHand(ui) == null) continue;
			if ( !unload() )
				dropAll("gfx/invobjs/snow");
		}
	}
	return digged;
}
function startDigging(x, y) {
	let ready = true;
	if (PBotCharacterAPI.getStamina(ui) < 70)
		if (!PBotUtils.drink(ui, true)) {
			err("Out of water");
			ready = false;
		}
	if (PBotUtils.tileResnameAt(ui, x, y) != "gfx/tiles/snow")
		ready = false;
	if (!PBotUtils.pfLeftClick(ui, x, y)) {
		info("Inaccessible tile. Skip", 3);
		ready = false;
	}
	if (!ready)
		return false;
	PBotCharacterAPI.doAct(ui, "dig");
	PBotUtils.mapClick(ui, x, y, 1, 0);
	PBotUtils.mapClick(ui, x, y, 3, 0);
	return waitForPlow();
}
function cancelDigging() {
  	info("Stopping digging this tile", 2);
  	let aim = PBotGobAPI.player(ui).gob.rc.floor();
  	PBotUtils.mapClick(ui, aim.x, aim.y, 1, 0);
}
function unloadItems(items) {
	let invItems = null;
	try {
		invItems = PBotUtils.playerInventory(ui).getInventoryItemsByNames(items);
		for (let i of invItems)
			i.transferItem();
	} catch(e) {
		err("unloadItems() error: " + e);
		return false;
	}
	return true;
}
function unload() {
	let a = g_aPiles[g_aPiles.length - 1];
	while ( !isPile(a) ) {
		if (g_aPiles.length == 0)
			return false;
		else {
			info("Next pile", 2);
			g_aPiles.pop();
			a = g_aPiles[g_aPiles.length - 1];
		}
	}
	info("Piling snow", 2);
	a.pfClick(1, 4);
	if (PBotUtils.getItemAtHand(ui) != null) {
		a.itemClick(0);
		waitForHandEmpty(true, 2 * 1000);
	}
	a.doClick(3, 0);
	let wPile = waitWindow(LS_STOCKPILE, 2 * 1000);
	if (wPile == null) {
		err("No stockpile window");
		return false;
	}
	return ( unloadItems(LS_SNOW) );
}
function dropAll(itemname) {
	let invPlayer = PBotUtils.playerInventory(ui);
	let itemsToDrop = invPlayer.getInventoryItemsByResnames([itemname]);
	info("Dumping " + itemname, 2);
	for (let i of itemsToDrop)
		i.dropItemFromInventory();
	let itemHand = PBotUtils.getItemAtHand(ui);
	if (itemHand != null) 
		if (itemHand.getResname() == itemname)
			PBotUtils.dropItemFromHand(ui, 0);
}
function info(s, l) {
	if (l <= messageLevel)
		PBotUtils.sysMsg(ui, s + "", 128, 192, 200);
}
function err(s) {
	stopmsg.push(s);
}
function irq() {
	if (PBotCharacterAPI.getStamina(ui) < 35) {
		err("Out of stamina");
	}
	if (PBotCharacterAPI.getEnergy(ui) < 35) {
		err("Out of energy");
	}
	if (PBotWindowAPI.getWindow(ui, WINDOWNAME) == null) {
		info("Stopped", 0);
		return true;
	}
	if (stopmsg.length == 0) {
		return false;
	} else {
		let errstr = "⚠ ";
		for (let r of stopmsg) {
			errstr += r + " ⚠ ";
		}
		PBotUtils.sysMsg(ui, errstr, 255, 128, 0);
		return true;
	}
}
function waitForHandEmpty(b, t){
	let r = false;
	let c = 0;
	while ((r == false) && (c < t)) {
		r = (PBotUtils.getItemAtHand(ui) == null) == b;
		PBotUtils.sleep(TICK);
		c += TICK;
	}
	return r;
}
function waitWindow(s, t) {
	let r = null;
	let c = 0;
	while ((r == null) && (c < t)) {
		r = PBotWindowAPI.getWindow(ui, s);
		PBotUtils.sleep(TICK);
		c += TICK;
	}
	return r;
}
function autodrinkSwitch(b) {
	if (hcConfig.autodrink == b)
		return;
	hcConfig.autodrink = b;
	info("Autodrink " + (b ? "Enabled!" : "Disabled!"), 2);
}
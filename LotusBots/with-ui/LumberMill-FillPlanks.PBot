//init
const ui = Java.type('haven.purus.pbot.PBotAPI').ui();
const hcConfig = Java.type('haven.Config');
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');

const VERSIONNAME = "0.01"
const WINDOWNAME = "LumberMill-MovePlanks";
const HOWTO = "HOWTO:\n  1. Press start\n  2. Select work zone \n";
const TICK = 100;

const messageLevel = 3;
var stopmsg = [];
var start = Date.now();

////////////////
windowWidth = 140;
windowHeight = 30;
const window = PBotUtils.PBotWindow(ui, WINDOWNAME, windowHeight, windowWidth, ScriptID);
const btnStart = window.addButton("btnStartClick", "Start", 80, 24, 0);
const howtoBtn = window.addButton("howtoBtnClick", "?", 24, 104, 0);
const statusLbl = window.addLabel("Select area with logs ..", 10, 10);
const progressLbl = window.addLabel("", 10, 25);
const timeLbl = window.addLabel(" ", 10, 40);
const estLbl = window.addLabel(" ", 10, 60);
const devider = window.addLabel("_____________", 25, 65);
const activityLbl = window.addLabel(" ", 10, 85);
statusLbl.hide();
progressLbl.hide();
estLbl.hide();
timeLbl.hide();
devider.hide();
activityLbl.hide();
const btnStartClick = () => {
	btnStart.hide();
	howtoBtn.hide();
	start = Date.now();
	main()
	statusLbl.hide();
	progressLbl.hide();
	estLbl.hide();
	timeLbl.hide();
	devider.hide();
  activityLbl.hide();
	btnStart.show();
	howtoBtn.show();
	info("Done", 0);
}
const howtoBtnClick = () => {
	info(WINDOWNAME + " " + VERSIONNAME + " " + HOWTO, 0)
}
///////////////
const main = () => {

}
///////////////////

function updatetime(){
  activityLbl.setText("updating time, please wait ");
  info("updating time, please wait .. ");
	let seconds = (Date.now()-start)/1000;
	let minutes = Math.floor((seconds)/60);
	seconds = Math.floor(seconds%60);
	timeLbl.setText(minutes + " min " + seconds + " sec ");
  if (messageLevel > 4) PBotUtils.sleep(3*TICK);
}
function waitForIdle() {
  activityLbl.setText("Wait for idle ..");
  info("Wait for idle", 4);
	const tick = 100;
	const maxWaitTicks = 5;
	let idleCounter = maxWaitTicks;
  while (idleCounter >= 0 && !irq()) {
    if (
			(PBotUtils.getHourglass(ui) == -1)
			||
			(PBotUtils.getHourglass(ui) >= 0.8)
      &&
      (!PBotGobAPI.player(ui).isMoving())
		)
			idleCounter--;
		else idleCounter = maxWaitTicks;
		PBotUtils.sleep(tick);
    info("Idle", 4);
		updatetime();
	}
}
function info(s, l) {
	if (l <= messageLevel)
		PBotUtils.sysMsg(ui, s + "", 128, 192, 200);
}
function sinfo(s, l) {
	if (l <= messageLevel)
		PBotUtils.sysMsg(ui, s + "", 50, 200, 60);
}
function err(s) {
	stopmsg.push(s);
}
function irq() {
	if (PBotCharacterAPI.getStamina(ui) < 35) {
		err("Out of stamina");
	}
	if (PBotCharacterAPI.getEnergy(ui) < 35) {
		err("Out of energy");
	}
	if (PBotWindowAPI.getWindow(ui, WINDOWNAME) == null) {
		info("Stopped", 0);
		return true;
	}
	if (stopmsg.length == 0) {
		return false;
	} else {
		let errstr = "⚠ ";
		for (let r of stopmsg) {
			errstr += r + " ⚠ ";
		}
		PBotUtils.sysMsg(ui, errstr, 255, 128, 0);
		return true;
	}
}

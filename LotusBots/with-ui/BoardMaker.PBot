const ui = Java.type('haven.purus.pbot.PBotAPI').ui();
const PBot = Java.type("haven.purus.pbot.PBotAPI");
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');

let stop;
const radius = 100;
windowWidth = 170;
windowHeight = 140;
const window = PBotUtils.PBotWindow(ui, "Log Factory", windowWidth, windowHeight, ScriptID);
const radiusLabel = window.addLabel("Search Radius: ", 10, 10);
const devider = window.addLabel("_______________", 25, 30);
const textEntry = window.addTextEntry(35, radius.toString(), 90, 5);
const checkboxSaw = window.addCheckbox("checkboxSaw", "Saw all Logs", false, 10, 50);
const checkboxChop = window.addCheckbox("checkboxChop", "Chop all Logs", false, 10, 70);
window.addLabel("_______________", 20, 120);
const btnStart = window.addButton("btnStartClick", "Start", 70, 35, 145);


//Adding default values
cboxSaw.setValue(true);
cboxChop.setValue(true);


const btnStartClick = () => {
    stop = false;
    radiusLabel.destroy();
    devider.destroy();
    btnStart.destroy();
    textEntry.destroy();
    cboxSaw.destroy();
    cboxChop.destroy();

    const infoRadius = window.addLabel("Search Radius: " + radius, 10, 20);
    const infoSaw = window.addLabel("Skin: " + cboxSaw.getValue(), 10, 55);
    const infoChop = window.addLabel("Clean: " + cboxChop.getValue(), 10, 65);
    main();
}
const main = () => {
    do {
        let gob = returnLog(radius); //FIX radius does nothing atm
        if(gob == null) {
            PBotUtils.sysMsg(ui, "Found no objects");
            window.closeWindow();
            stop = true;
            break;
        }
        const target = window.addLabel(gob.getResname().toString(), 10, 10);
        const targetDistance = window.addLabel("Distance: " + Math.floor(distanceToGob(gob)), 10, 30);
        const status = window.addLabel("Pathfinding", 40, 135);

        pfToGob(gob);
        status.destroy();

        if (cboxSaw.getValue()) {
            gob.doClick(3, 0);
            PBotUtils.waitForFlowerMenu();
            if(PBotUtils.choosePetal("Make boards")) {
                const status = window.addLabel("status: Sawing", 20, 135);
                PBotUtils.sysMsg(ui, "Going to Saw");
                PBotUtils.waitForHourglass(500);
                PBotUtils.dropItemFromHand(0);
                status.destroy();
            }
        }
        if (cboxChop.getValue()) {
            gob.doClick(3, 0);
            PBotUtils.waitForFlowerMenu();
            if(PBotUtils.choosePetal("Chop into blocks")) {
                const status = window.addLabel("status: Chopping", 20, 135);
                PBotUtils.sysMsg(ui, "Going to Chop");
                PBotUtils.waitForHourglass(500);
                PBotUtils.dropItemFromHand(0);
                status.destroy();
            }
        }


        PBotUtils.sysMsg(ui, "Close the window to stop");
        PBotUtils.sysMsg(ui, "Waiting 1000ms");
        PBotUtils.sleep(1000);
        target.destroy();
        targetDistance.destroy();
    } while (!stop && !window.closed());
    PBotUtils.sysMsg(ui, "MeatFactory finished!");
};

function pfToGob(gob){
    // wait for player to start moving, then for player to stop
    do {
        if(!PBotGobAPI.player(ui).isMoving()){ //Standing still
            if (!gob.pfClick(1, 0)) {
                PBotUtils.sysMsg(ui, "Cant find a way to path to the object");
            }
            PBotUtils.sleep(300);
        }
        if(PBotGobAPI.player(ui).isMoving()){
            PBotUtils.sysMsg(ui, "movin' I am waiting 300ms");
            PBotUtils.sleep(300);
        }
    } while (distanceToGob > 11);
}
function distanceToGob(gob){
    const gobPos = gob.getRcCoords().floor();
    const playerPos = PBotGobAPI.player(ui).getRcCoords().floor();
    const distanceX = gobPos.x - playerPos.x;
    const distanceY = gobPos.y - playerPos.y;
    const total =  pythagorean(distanceX, distanceY);
    return total;
}
function pythagorean(sideA, sideB){
  return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));
}
function returnLog(radius) {
    let gob = PBotGobAPI.getClosestGobByResname('gfx/terobjs/trees/');
    if (gob) {
        return gob;
    }
}
function checkboxBoards(){}
function checkboxBlocks(){}

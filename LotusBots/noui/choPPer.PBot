//init
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotAPI = Java.type('haven.purus.pbot.PBotAPI');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');

const hcCoord = Java.type('haven.Coord');
const hcOCache = Java.type('haven.OCache');
const defCoord = new hcCoord(16, 16);

const ITEMSHOVEL = "Wooden Shovel";
const ITEMAXE = "Stone Axe";
const WINDOWNAME = "Timber!";
const DEBUGLVL = 0;
const tick = 300;
var critical = false;

//UI
var window = PBotUtils.PBotWindow(WINDOWNAME, 120, 110, ScriptID);
const captTreesBtn = window.addButton("captTreesF", "Pick area", 100, 5, 5);
const infoLabel = window.addLabel("", 45, 100);
const captTreesF = () => {
	infoLabel.setText("");
	main();
	infoLabel.setText("Done");
}

function main() {
	critical = false;
	var aTrees = [];
	var aBushes = [];
	var aStumps = [];
	PBotUtils.selectArea();
	let lAllGobs = PBotUtils.gobsInArea(PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB());
	for (let g of lAllGobs) {
		if (isStump(g))
			aStumps.push(g);
		if (isBush(g))
			aBushes.push(g);
		if (isTree(g))
			aTrees.push(g);
	}
	PBotUtils.sysMsg("All stumps, bushes and trees added!");
	for (let s of aStumps) {
		infoLabel.setText("S: " + aStumps.indexOf(s) + "/" + aStumps.length);
		s.pfClick(1, 0);
		removeStump();
	}
	for (let t of aTrees) {
		infoLabel.setText("T: " + aTrees.indexOf(t) + "/" + aTrees.length);
		processTree(t);
		removeStump();
	}
	for (let b of aBushes) {
		infoLabel.setText("B: " + aBushes.indexOf(b) + "/" + aBushes.length);
		processTree(b);
	}
}
//HELPERS
function isTree(a) {
	let res = false;
	try {
		let gobName = a.getResname();
		if (gobName.endsWith("stump") || gobName.endsWith("log"))
			return false;
		res = gobName.startsWith("gfx/terobjs/trees/");
	} catch(e) {}
	return res;
}
function isBush(a) {
	let res = false;
	try {
		let gobName = a.getResname();
		res = gobName.startsWith("gfx/terobjs/bushes/");
	} catch(e) {}
	return res;
}
function isStump(a) {
	let res = false;
	try {
		let gobName = a.getResname();
		res = (gobName.startsWith("gfx/terobjs/trees/") && gobName.endsWith("stump"));
	} catch(e) {}
	return res;
}
function processTree(a) {
	equipItem(ITEMAXE, 6);
	if (irq()) return;

	a.pfClick(1, 0);
	pickPetal("Chop");
	waitForIdle();
}
function pickPetal(s) {
	let r = false;
	PBotUtils.waitForFlowerMenu();
	r = PBotUtils.choosePetal(s);
	PBotUtils.closeFlowermenu();
	return r;
}
function waitForIdle() {
	dpo("Wait for idle", 2);
	const maxWaitTicks = 4;
	let idleCounter = maxWaitTicks;
	while (idleCounter >= 0 && !irq()) {
		if (PBotUtils.getHourglass() == -1)
			idleCounter--;
		else {
			idleCounter = maxWaitTicks;
		}
		PBotUtils.sleep(tick);
		if (PBotCharacterAPI.getStamina() < 50)
			PBotUtils.drink(true);
	}
	dpo("Idle", 2);
}
function irq() {
	let r = false;
	if (PBotCharacterAPI.getStamina() < 35) {
		dpo("Out of stamina", 0);
		r = true;
	}
	if (PBotCharacterAPI.getEnergy() < 35) {
		dpo("Out of energy", 0);
		r = true;
	}
	return r;
}
function removeStump() {
	if (irq()) return;
	PBotUtils.sysMsg("removing stumps");
	let player = PBotGobAPI.player().gob;
	let stump = null;
	for (let PBg of PBotGobAPI.getAllGobs()) {
		if (stump) break;
		if (!isStump(PBg)) continue;
		if (player.rc.dist(PBg.gob.rc) <= 25) stump = PBg;
	}

	if (stump) {
		equipItem(ITEMSHOVEL, 6);
		if (irq()) return;
		PBotCharacterAPI.doAct("destroy");
		stump.doClick(1, 0);
		waitForIdle();
		stump.doClick(3, 0);
	}
}
function dpo(s, l) {
	if (l > DEBUGLVL)
		return;
	let padded = "";
	for (let i = 0; i < l; i++)
		padded += "\t";
	padded += s;
	console.log(padded);
	PBotUtils.sysMsg(padded);
}
function equipItem(item, slot) {
	let equipory = PBotAPI.gui.getequipory();
	let slots = [
		equipory.quickslots[6],
		equipory.quickslots[7]
	];
	for (let i of slots)
		if (i != null)
			if (i.item.getname() == item)
				return true;

	for (let i of slots)
		if (i != null)
			i.item.wdgmsg("transfer", defCoord);

	PBotUtils.sleep(tick);
	slots = [
		equipory.quickslots[6],
		equipory.quickslots[7]
	];

	for (let i of slots)
		if (i != null) {
			dpo("Can't free hands", 1);
			critical = true;
			return false;
		}

	let invItem = null;
	try {
		invItem = PBotUtils.playerInventory().getInventoryItemsByNames([item])[0];
	} catch(e) {}
	if (invItem == null) {
		dpo("No " + item + " found", 1);
		critical = true;
		return false;
	}
	let itemCoords = invItem.witem.c.div(33);
	invItem.takeItem();
	waitForHandEmpty(false, 5000);
	equipory.wdgmsg("drop", slot);
	waitForHandEmpty(true, tick);
	if (waitForHandEmpty(false, 1000))
		PBotUtils.playerInventory().dropItemToInventory(itemCoords);
	return true;
}
function waitForHandEmpty(b, t){
	let counter = 0;
	while ((PBotUtils.getItemAtHand() == null) != b) {
		if (counter >= t) {
			return false;
		}
		PBotUtils.sleep(tick);
		counter += tick;
	}
	return true;
}

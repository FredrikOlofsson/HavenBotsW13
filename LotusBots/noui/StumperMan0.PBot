// Fills troughs with crops
// Made by Purus Cor to demonstrate usage of PBot API
// For more information about API, join Purus Pasta discord
// To suggest features into API, suggest them in discord
const PBot = Java.type("haven.purus.pbot.PBotAPI");
const PBotAPI = Java.type('haven.purus.pbot.PBotAPI');
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
////////////////
windowWidth = 100;
windowHeight = 200;
const window = PBotUtils.PBotWindow("LumberMan", windowWidth, windowHeight, ScriptID);
const btnStart = window.addButton("btnStartClick", "Start", 70, 35, 85);
const btnStartClick = () => {
	stop = false;
	btnStart.destroy();
	main();
}
///////////////
const DEBUGLVL = 6;
const tick = 200;
let stop;
const shouldStop = () => {
	return stop || window.closed();
};
const main = () => {
	do {
		//window
			const statusLbl = window.addLabel("Initializing...", 10, 10);
			const progressLbl = window.addLabel("", 10, 20);
			const estLbl = window.addLabel("Estimated time:", 10, 30);
			const timeLbl = window.addLabel("00", 100, 30);
			const devider = window.addLabel("_______________", 25, 35);
		//add bushes, trees and stopms into seperate containers
			var aStumps = [];
			PBotUtils.selectArea();
			let allGobs = PBotUtils.gobsInArea(PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB());
			for (let g of allGobs) {
				if (isStump(g))
					aStumps.push(g);
			}
			let workorder = aStumps;
			statusLbl.setText("Added Workorders!");
			PBotUtils.sleep(tick);
			statusLbl.setText("Sorting Workorders");
			workorder = workorder.sort(
				(a, b) =>
					PBotGobAPI.player().getRcCoords().dist(a.getRcCoords()) - PBotGobAPI.player().getRcCoords().dist(b.getRcCoords())
			);
			statusLbl.setText("Sorting Done!");
			PBotUtils.sleep(tick);
			statusLbl.setText("Amount of objects: " + workorder.length);
			const start = Date.now();
			let processed = 0;
			workorder.forEach((gob) => {
				progressLbl.setText("Progress: " + Math.round(processed/workorder.length*100) + "%");
				let seconds = ((Date.now()-start)/processed*(workorder.length-processed))/1000;
				const minutes = Math.floor((seconds)/60);
				seconds = Math.floor(seconds%60);
				timeLbl.setText(minutes + " minutes " + seconds + " seconds ");
				processed++;
				if(shouldStop()) return;
				removeStump(gob);
			});
		//destoy the window components
			statusLbl.destroy();
			progressLbl.destroy();
			estLbl.destroy();
			timeLbl.destroy();
			devider.destroy();

	} while (!stop && !window.closed());
	PBotUtils.sysMsg("LumberMan finished!");
};
function irq() {
	let r = false;
	if (PBotCharacterAPI.getStamina() < 35) {
		dpo("Out of stamina", 0);
		r = true;
	}
	if (PBotCharacterAPI.getEnergy() < 35) {
		dpo("Out of energy", 0);
		r = true;
	}
	return r;
}
function dpo(s, l) {
	if (l > DEBUGLVL)
		return;
	let padded = "";
	for (let i = 0; i < l; i++)
		padded += "\t";
	padded += s;
	console.log(padded);
	PBotUtils.sysMsg(padded);
}
function isStump(a) {
	let res = false;
	try {
		let gobName = a.getResname();
		res = gobName.startsWith("gfx/terobjs/trees/") && gobName.endsWith("stump");
	} catch (e) {}
	return res;
}
function removeStump(gob) {
	if (gob.pfClick(1, 0)) {
		if (shouldStop()) return;
		PBotCharacterAPI.doAct("destroy");
		gob.doClick(1, 0);
		PBotCharacterAPI.cancelAct();
		waitForIdle();
	} else {
		return false;
	}
	return true;
}
function waitForIdle() {
	const maxWaitTicks = 4;
	PBotUtils.waitForHourglass(tick * maxWaitTicks);
	let idleCounter = maxWaitTicks;
	while (idleCounter >= 0 && !shouldStop()) {
		if (PBotUtils.getHourglass() == -1 && !PBotGobAPI.player().isMoving()) idleCounter--;
		else idleCounter = maxWaitTicks;
		PBotUtils.sleep(tick);
	}
}
